{
	"variables": [],
	"info": {
		"name": "Ounass_API",
		"_postman_id": "9e8a030b-9dcb-ea5a-543c-effd2a59f198",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "mehul",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//checks that Status code is 200",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"//fetch the response body",
							"var jsonData=JSON.parse(responseBody);",
							"//fetch all the parent children nodes count",
							"var expectedCount = jsonData.children.length;",
							"//print children nodes count in console",
							"console.info(\"children at level 1 is \"+expectedCount);",
							"//checks First node should have more than 10 categories on children_data node.",
							"tests[\"count is greater than 10\"] = jsonData.children.length>10;",
							"//loop to iterate over all the children nodes at level 1",
							"for(var i=0; i<expectedCount; i++) {",
							"    //checks Every node should have an \"id\"",
							"     tests[\"Verify id is there for children:\" + i] = jsonData.children[i].categoryId>0;",
							"     //checks Every node should have an \"name\"",
							"     tests[\"Verify name is there for children :\" + i] = jsonData.children[i].name!==null;",
							"     //checks Every node should have an \"url\"",
							"     tests[\"Verify url is there :\" + i] =jsonData.children[i].url!==null;",
							"     //checks Every node should have an \"image\"",
							"     tests[\"Verify image is there :\" + i] =jsonData.children[i].image!==null;",
							"}",
							"//loop to iterate over sub children of parent childer at level 2",
							"for(var i=0; i<expectedCount; i++) ",
							"{",
							"   //used to get the number of sub children at level 2 ",
							"   var count_leveltwo=jsonData.children[i].children.length;",
							"   //loop to iterate over sub children at level 3.",
							"   for(var j=0;j<count_leveltwo;j++)",
							"   { ",
							"       //used to get the number of sub children at level 3 ",
							"       var count_levelthree=jsonData.children[i].children[j].children.length;",
							"       ",
							"       //loop to iterate over sub children at level 3.",
							"       for(var k=0;k<count_levelthree;k++)",
							"       {",
							"         //used to get the response body of children at level 3.",
							"        var jsonObject=jsonData.children[i].children[j].children[k];",
							"       ",
							"        //used to get includeInMenu value at level 3.",
							"        var includeInMenu=jsonObject.includeInMenu;",
							"        //used to get availableSortBy value elements in it at level 3.",
							"        var sortBySize=jsonObject.availableSortBy.length;",
							"        //used to print number of availableSortBy elements in it at level 3.",
							"        console.info(\"length of sortBy\"+jsonObject.availableSortBy.length);",
							"        //used to get featureLink value at level 3.",
							"        var featureLink=jsonObject.featureLink;",
							"       ",
							"        //verify Third level category should have “includeInMenu” as false",
							"        tests[\"Verify Third level category should have “includeInMenu” as false at \"+\"children \"+i+\"children \"+j+\"children \"+k] =includeInMenu===false;",
							"        if(includeInMenu===false)",
							"        {",
							"            //print whether Third level category should have “includeInMenu” as false",
							"            console.info(\"Verify includeinMenu is false at \"+\"children \"+i+\"children \"+j+\"children \"+k);",
							"        }",
							"        // check Last level of categories should have “availableSortBy” minimum of 2 sub nodes",
							"        tests[\"Verify sortBySize has min 2 sub nodes : at \"+\"children \"+i+\"children \"+j+\"children \"+k] =sortBySize>=2;",
							"        ",
							"        // check Last level of categories should have “availableSortBy” minimum of 2 sub nodes",
							"        if(sortBySize>=2)",
							"        {",
							"         //print whether Last level of categories should have “availableSortBy” minimum of 2 sub nodes    ",
							"        console.info(\"sortBySize has minimum of 2 subnodes for \"+\"children \"+i+\"children \"+j+\"children \"+k);",
							"        }",
							"        //to convert object to string",
							"        var flink=\"\"+featureLink;",
							"        //checks whether A node with featureLink with “/edits/*” should be in 3rd level",
							"        tests[\"Verify featureLink is there :\"+\"children \"+i+\"children \"+j+\"children \"+k] =flink.includes(\"/edits/\");",
							"        //checks whether A node with featureLink with “/edits/*” should be in 3rd level",
							"        if(flink.includes(\"/edits/\"))",
							"        {",
							"            //print whether A node with featureLink with “/edits/*” should be in 3rd level",
							"            console.info(\"featureLink has /edits/* for \"+\"children \"+i+\"children \"+j+\"children \"+k);",
							"        }",
							"        ",
							"        }",
							"   }",
							" ",
							"   ",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "https://www.ounass.ae/categories/getcategorytree/",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		}
	]
}